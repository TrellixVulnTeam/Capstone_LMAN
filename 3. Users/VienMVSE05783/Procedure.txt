/*Topup For Account*/

DROP PROCEDURE IF EXISTS dbo.topUpForAccount
CREATE PROCEDURE dbo.topUpForAccount
@AccountID int, @Amount decimal(18,6), @AdminID int, @Description nvarchar(max)
As
BEGIN 
SET NOCOUNT ON;
  DECLARE @trancount int;
  SET @trancount = @@trancount;
	begin try
	 IF @trancount = 0
      BEGIN TRANSACTION
      ELSE
        SAVE TRANSACTION saveMyPoint;
	DECLARE @checkSum varchar(10)=(SELECT Substring(( SELECT CONVERT(varchar(max),(select HASHBYTES('md5',CAST((select CURRENT_TIMESTAMP) AS binary))),2)),1,10));
	DECLARE @beforeBalance decimal(18,6)=( SELECT TOP(1) isnull(accLogs.AfterBalance,0)
From Transactions tr, AccountLogs accLogs
Where accLogs.TransactionId = tr.Id and accLogs.AccountID= @AccountID
Order by tr.Date DESC)
		INSERT INTO Transactions ([Type], [Amount], [AdminId],[Date],[CheckSum] ,[Description])
		VALUES(1,@Amount,@AdminID,GETDATE(),@checkSum,@Description)
		insert into AccountLogs([AccountID],[BeforeBalance],[AfterBalance],[CheckSum],[TransactionId])
		values(@AccountID,@beforeBalance,@beforeBalance+@Amount,@checkSum,(Select TOP(1) ID from Transactions where [CheckSum]=@checkSum ))
		   lbexit:
      IF @trancount = 0
      COMMIT;

	end try
	BEGIN CATCH
	 DECLARE @error int,
            @message varchar(4000),
            @xstate int;

    SELECT
      @error = ERROR_NUMBER(),
      @message = ERROR_MESSAGE(),
      @xstate = XACT_STATE();

    IF @xstate = -1
      ROLLBACK;
    IF @xstate = 1 AND @trancount = 0
      ROLLBACK
    IF @xstate = 1 AND @trancount > 0
		 ROLLBACK TRANSACTION saveMyPoint ;
		     RAISERROR ('topUpAccount: %d: %s', 16, 1, @error, @message);
	End Catch
END

EXEC dbo.topUpForAccount @AccountID=1, @Amount=200000,@AdminID=null,@Description='12345678675432323';


/*Get Balance*/


DROP PROCEDURE IF EXISTS dbo.getBalanceByAccountID
CREATE PROCEDURE dbo.getBalanceByAccountID
@AccountID int
AS
BEGIN
SELECT TOP(1) isnull(accLogs.AfterBalance,0)
From Transactions tr, AccountLogs accLogs
Where accLogs.TransactionId = tr.Id and accLogs.AccountID= @AccountID
Order by tr.Date DESC
END;

EXEC dbo.getBalanceByAccountID @AccountID=1;


/*Get Transaction History*/

DROP PROCEDURE IF EXISTS dbo.getTransactionHistoryByAccountID
CREATE PROCEDURE dbo.getTransactionHistoryByAccountID
@AccountID int
AS
BEGIN
SELECT trans.Id TransactionId, accLogs.BeforeBalance, accLogs.AfterBalance, trans.Amount, trans.[Type] TypeID, trans.[Date] TransactionTime, trans.AdminId, accLogs.AccountID
From AccountLogs accLogs, Transactions trans
Where accLogs.TransactionId =trans.Id and accLogs.AccountID=@AccountID
ORDER BY trans.[Date] DESC
END;


EXEC dbo.getTransactionHistoryByAccountID @AccountID=2;

/* Add Voucher */
DROP PROCEDURE IF EXISTS dbo.AddVoucher
CREATE PROCEDURE dbo.AddVoucher
@Title nvarchar(max), @code nvarchar(50) ,@content nvarchar(max), @Image nvarchar(50), @FromDate date, @ToDate date, @IsExpress bit , @Quantity int 
as
Begin
SET NOCOUNT OFF;
  DECLARE @trancount int;
  SET @trancount = @@trancount;
	begin try
	 IF @trancount = 0
      BEGIN TRANSACTION
      ELSE
        SAVE TRANSACTION saveMyPoint;
INSERT INTO Voucher ([Title], [Code], [Content], [Image], [FromDate], [ToDate], [IsExpires], [Quantity])
values(@Title,@code,@content,@Image,@FromDate,@ToDate , @IsExpress, @Quantity)
IF @trancount = 0
      COMMIT;

	end try
	BEGIN CATCH
	 DECLARE @error int,
            @message varchar(4000),
            @xstate int;

    SELECT
      @error = ERROR_NUMBER(),
      @message = ERROR_MESSAGE(),
      @xstate = XACT_STATE();

    IF @xstate = -1
      ROLLBACK;
    IF @xstate = 1 AND @trancount = 0
      ROLLBACK
    IF @xstate = 1 AND @trancount > 0
		 ROLLBACK TRANSACTION saveMyPoint ;
		     RAISERROR ('addVoucher: %d: %s', 16, 1, @error, @message);
	End Catch
END

EXEC  dbo.addVoucher 'voucher 1','ABCDE','dfcsfcwerirew',null,'02/21/2021','02/24/2021',0,1000;



